"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _necessary = require("necessary");
function _array_like_to_array(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _array_without_holes(arr) {
    if (Array.isArray(arr)) return _array_like_to_array(arr);
}
function _iterable_to_array(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _non_iterable_spread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _to_consumable_array(arr) {
    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();
}
function _unsupported_iterable_to_array(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _array_like_to_array(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(n);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);
}
var first = _necessary.arrayUtilities.first, forwardsSome = _necessary.arrayUtilities.forwardsSome, backwardsSome = _necessary.arrayUtilities.backwardsSome;
function getMultiplicity() {
    var childNodesLength = this.childNodes.length, multiplicity = childNodesLength; ///
    return multiplicity;
}
function mapChildNode(callback) {
    return this.childNodes.map(callback);
}
function someChildNode(callback) {
    return this.childNodes.some(callback);
}
function findChildNode(callback) {
    return this.childNodes.find(callback);
}
function everyChildNode(callback) {
    return this.childNodes.every(callback);
}
function filterChildNode(callback) {
    return this.childNodes.filter(callback);
}
function reduceChildNode(callback, initialValue) {
    return this.childNodes.reduce(callback, initialValue);
}
function forEachChildNode(callback) {
    this.childNodes.forEach(callback);
}
function forwardsSomeChildNode(callback) {
    return forwardsSome(this.childNodes, callback);
}
function backwardsSomeChildNode(callback) {
    return backwardsSome(this.childNodes, callback);
}
function indexOfChildNode(childNode) {
    return this.childNodes.indexOf(childNode);
}
function setChildNodesParentNode(childNodes) {
    if (childNodes === undefined) {
        childNodes = _to_consumable_array(this.childNodes);
    }
    var parentNode = this;
    childNodes.forEach(function(childNode) {
        childNode.setParentNode(parentNode);
    });
}
function resetChildNodesParentNode(childNodes) {
    if (childNodes === undefined) {
        childNodes = _to_consumable_array(this.childNodes);
    }
    var parentNode = null;
    childNodes.forEach(function(childNode) {
        childNode.setParentNode(parentNode);
    });
}
function addChildNode(addedChildNode, startIndex) {
    var addedChildNodes = [
        addedChildNode
    ];
    this.addChildNodes(addedChildNodes, startIndex);
}
function addChildNodes(addedChildNodes, startIndex) {
    var deleteCount = 0;
    this.spliceChildNodes(startIndex, deleteCount, addedChildNodes);
}
function removeChildNode(removedChildNode) {
    var removedChildNodes;
    removedChildNodes = [
        removedChildNode
    ];
    removedChildNodes = this.removeChildNodes(removedChildNodes);
    return removedChildNodes;
}
function removeChildNodes(removedChildNodes) {
    if (removedChildNodes === undefined) {
        removedChildNodes = _to_consumable_array(this.childNodes);
    }
    var removedChildNodesLength = removedChildNodes.length;
    if (removedChildNodesLength > 0) {
        var firstReplacedChildNode = first(removedChildNodes), startIndex = this.childNodes.indexOf(firstReplacedChildNode), deleteCount = removedChildNodesLength, addedChildNodes = [];
        removedChildNodes = this.spliceChildNodes(startIndex, deleteCount, addedChildNodes);
    }
    return removedChildNodes;
}
function replaceChildNode(replacedChildNode, replacementChildNodes) {
    var replacedChildNodes = [
        replacedChildNode
    ];
    this.replaceChildNodes(replacedChildNodes, replacementChildNodes);
}
function replaceChildNodes(replacedChildNodes, replacementChildNodes) {
    var replacedChildNodesLength = replacedChildNodes.length, firstReplacedChildNode = first(replacedChildNodes), startIndex = this.childNodes.indexOf(firstReplacedChildNode), deleteCount = replacedChildNodesLength; ///
    this.spliceChildNodes(startIndex, deleteCount, replacementChildNodes);
}
function appendChildNode(appendedChildNode) {
    var appendedChildNodes = [
        appendedChildNode
    ];
    this.appendChildNodes(appendedChildNodes);
}
function appendChildNodes(appendedChildNodes) {
    var addedChildNodes = appendedChildNodes, multiplicity = this.getMultiplicity(), startIndex = multiplicity; ///
    this.addChildNodes(addedChildNodes, startIndex);
}
function prependChildNode(prependedChildNode) {
    var prependedChildNodes = [
        prependedChildNode
    ];
    this.prependChildNodes(prependedChildNodes);
}
function prependChildNodes(prependedChildNodes) {
    var addedChildNodes = prependedChildNodes, startIndex = 0;
    this.addChildNodes(addedChildNodes, startIndex);
}
function spliceChildNodes(startIndex, deleteCount) {
    var addedChildNodes = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
    var _this_childNodes;
    var removedChildNodes = (_this_childNodes = this.childNodes).splice.apply(_this_childNodes, [
        startIndex,
        deleteCount
    ].concat(_to_consumable_array(addedChildNodes)));
    this.resetChildNodesParentNode(removedChildNodes);
    this.setChildNodesParentNode(addedChildNodes);
    return removedChildNodes;
}
function sliceChildNodes(startIndex) {
    var endIndex = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Infinity;
    var childNodes = this.childNodes.slice(startIndex, endIndex);
    return childNodes;
}
function getAncestorNodes() {
    var ancestorNodes = [];
    var ancestorNode = this.parentNode; ///
    while(ancestorNode !== null){
        ancestorNodes.push(ancestorNode);
        var parentNode = ancestorNode.getParentNode();
        ancestorNode = parentNode; ///
    }
    return ancestorNodes;
}
function mapAncestorNode(callback) {
    var ancestorNodes = this.getAncestorNodes();
    return ancestorNodes.map(callback);
}
function someAncestorNode(callback) {
    var result = false;
    var index = 0, ancestorNode = this.parentNode; ///
    while(ancestorNode !== null){
        result = callback(ancestorNode, index);
        if (result) {
            break;
        }
        var parentNode = ancestorNode.getParentNode();
        ancestorNode = parentNode; ///
        index++;
    }
    return result;
}
function findAncestorNode(callback) {
    var index = 0, ancestorNode = this.parentNode; ///
    while(ancestorNode !== null){
        var result = callback(ancestorNode, index);
        if (result) {
            return ancestorNode;
        }
        var parentNode = ancestorNode.getParentNode();
        ancestorNode = parentNode; ///
        index++;
    }
}
function everyAncestorNode(callback) {
    var ancestorNodes = this.getAncestorNodes();
    return ancestorNodes.every(callback);
}
function filterAncestorNode(callback) {
    var ancestorNodes = this.getAncestorNodes();
    return ancestorNodes.filter(callback);
}
function reduceAncestorNode(callback, initialValue) {
    var ancestorNodes = this.getAncestorNodes();
    return ancestorNodes.reduce(callback, initialValue);
}
function forEachAncestorNode(callback) {
    var ancestorNodes = this.getAncestorNodes();
    ancestorNodes.forEach(callback);
}
var nodeMixins = {
    getMultiplicity: getMultiplicity,
    mapChildNode: mapChildNode,
    someChildNode: someChildNode,
    findChildNode: findChildNode,
    everyChildNode: everyChildNode,
    filterChildNode: filterChildNode,
    reduceChildNode: reduceChildNode,
    forEachChildNode: forEachChildNode,
    forwardsSomeChildNode: forwardsSomeChildNode,
    backwardsSomeChildNode: backwardsSomeChildNode,
    indexOfChildNode: indexOfChildNode,
    setChildNodesParentNode: setChildNodesParentNode,
    resetChildNodesParentNode: resetChildNodesParentNode,
    addChildNode: addChildNode,
    addChildNodes: addChildNodes,
    removeChildNode: removeChildNode,
    removeChildNodes: removeChildNodes,
    replaceChildNode: replaceChildNode,
    replaceChildNodes: replaceChildNodes,
    appendChildNode: appendChildNode,
    appendChildNodes: appendChildNodes,
    prependChildNode: prependChildNode,
    prependChildNodes: prependChildNodes,
    spliceChildNodes: spliceChildNodes,
    sliceChildNodes: sliceChildNodes,
    getAncestorNodes: getAncestorNodes,
    mapAncestorNode: mapAncestorNode,
    someAncestorNode: someAncestorNode,
    findAncestorNode: findAncestorNode,
    everyAncestorNode: everyAncestorNode,
    filterAncestorNode: filterAncestorNode,
    reduceAncestorNode: reduceAncestorNode,
    forEachAncestorNode: forEachAncestorNode
};
var _default = nodeMixins;

//# sourceMappingURL=data:application/json;base64,